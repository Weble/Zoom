<?php
/**
 * WebinarsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Zoom API
 *
 * The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: developersupport@zoom.us
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Weble\Zoom\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Weble\Zoom\ApiException;
use Weble\Zoom\Configuration;
use Weble\Zoom\HeaderSelector;
use Weble\Zoom\ObjectSerializer;

/**
 * WebinarsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WebinarsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getTrackingSources
     *
     * Get Webinar Tracking Sources
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Weble\Zoom\Model\InlineResponse20074
     */
    public function getTrackingSources($webinar_id)
    {
        [$response] = $this->getTrackingSourcesWithHttpInfo($webinar_id);
        return $response;
    }

    /**
     * Operation getTrackingSourcesWithHttpInfo
     *
     * Get Webinar Tracking Sources
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Weble\Zoom\Model\InlineResponse20074, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTrackingSourcesWithHttpInfo($webinar_id)
    {
        $returnType = '\\' . \Weble\Zoom\Model\InlineResponse20074::class;
        $request = $this->getTrackingSourcesRequest($webinar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\\' . \SplFileObject::class) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\\' . \Weble\Zoom\Model\InlineResponse20074::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTrackingSourcesAsync
     *
     * Get Webinar Tracking Sources
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTrackingSourcesAsync($webinar_id)
    {
        return $this->getTrackingSourcesAsyncWithHttpInfo($webinar_id)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation getTrackingSourcesAsyncWithHttpInfo
     *
     * Get Webinar Tracking Sources
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTrackingSourcesAsyncWithHttpInfo($webinar_id)
    {
        $returnType = '\\' . \Weble\Zoom\Model\InlineResponse20074::class;
        $request = $this->getTrackingSourcesRequest($webinar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\\' . \SplFileObject::class) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTrackingSources'
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTrackingSourcesRequest($webinar_id)
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling getTrackingSources'
            );
        }

        $resourcePath = '/webinars/{webinarId}/tracking_sources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPastWebinarFiles
     *
     * List Past Webinar Files
     *
     * @param  string $webinar_id webinar_id (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Weble\Zoom\Model\InlineResponse20084
     */
    public function listPastWebinarFiles($webinar_id)
    {
        [$response] = $this->listPastWebinarFilesWithHttpInfo($webinar_id);
        return $response;
    }

    /**
     * Operation listPastWebinarFilesWithHttpInfo
     *
     * List Past Webinar Files
     *
     * @param  string $webinar_id (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Weble\Zoom\Model\InlineResponse20084, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPastWebinarFilesWithHttpInfo($webinar_id)
    {
        $returnType = '\\' . \Weble\Zoom\Model\InlineResponse20084::class;
        $request = $this->listPastWebinarFilesRequest($webinar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\\' . \SplFileObject::class) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\\' . \Weble\Zoom\Model\InlineResponse20084::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPastWebinarFilesAsync
     *
     * List Past Webinar Files
     *
     * @param  string $webinar_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPastWebinarFilesAsync($webinar_id)
    {
        return $this->listPastWebinarFilesAsyncWithHttpInfo($webinar_id)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation listPastWebinarFilesAsyncWithHttpInfo
     *
     * List Past Webinar Files
     *
     * @param  string $webinar_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPastWebinarFilesAsyncWithHttpInfo($webinar_id)
    {
        $returnType = '\\' . \Weble\Zoom\Model\InlineResponse20084::class;
        $request = $this->listPastWebinarFilesRequest($webinar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\\' . \SplFileObject::class) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPastWebinarFiles'
     *
     * @param  string $webinar_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listPastWebinarFilesRequest($webinar_id)
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling listPastWebinarFiles'
            );
        }

        $resourcePath = '/past_webinars/{webinarId}/files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPastWebinarPollResults
     *
     * List Past Webinar Poll Results
     *
     * @param  string $webinar_id The Webinar ID or Webinar UUID. If the webinar ID is passed, it will take the last webinar instance. (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Weble\Zoom\Model\InlineResponse20085
     */
    public function listPastWebinarPollResults($webinar_id)
    {
        [$response] = $this->listPastWebinarPollResultsWithHttpInfo($webinar_id);
        return $response;
    }

    /**
     * Operation listPastWebinarPollResultsWithHttpInfo
     *
     * List Past Webinar Poll Results
     *
     * @param  string $webinar_id The Webinar ID or Webinar UUID. If the webinar ID is passed, it will take the last webinar instance. (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Weble\Zoom\Model\InlineResponse20085, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPastWebinarPollResultsWithHttpInfo($webinar_id)
    {
        $returnType = '\\' . \Weble\Zoom\Model\InlineResponse20085::class;
        $request = $this->listPastWebinarPollResultsRequest($webinar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\\' . \SplFileObject::class) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\\' . \Weble\Zoom\Model\InlineResponse20085::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPastWebinarPollResultsAsync
     *
     * List Past Webinar Poll Results
     *
     * @param  string $webinar_id The Webinar ID or Webinar UUID. If the webinar ID is passed, it will take the last webinar instance. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPastWebinarPollResultsAsync($webinar_id)
    {
        return $this->listPastWebinarPollResultsAsyncWithHttpInfo($webinar_id)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation listPastWebinarPollResultsAsyncWithHttpInfo
     *
     * List Past Webinar Poll Results
     *
     * @param  string $webinar_id The Webinar ID or Webinar UUID. If the webinar ID is passed, it will take the last webinar instance. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPastWebinarPollResultsAsyncWithHttpInfo($webinar_id)
    {
        $returnType = '\\' . \Weble\Zoom\Model\InlineResponse20085::class;
        $request = $this->listPastWebinarPollResultsRequest($webinar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\\' . \SplFileObject::class) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPastWebinarPollResults'
     *
     * @param  string $webinar_id The Webinar ID or Webinar UUID. If the webinar ID is passed, it will take the last webinar instance. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listPastWebinarPollResultsRequest($webinar_id)
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling listPastWebinarPollResults'
            );
        }

        $resourcePath = '/past_webinars/{webinarId}/polls';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPastWebinarQA
     *
     * List Q&A of Past Webinar
     *
     * @param  string $webinar_id The Webinar ID or Webinar UUID. If the webinar ID is passed, it will take the last webinar instance. (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Weble\Zoom\Model\InlineResponse20086
     */
    public function listPastWebinarQA($webinar_id)
    {
        [$response] = $this->listPastWebinarQAWithHttpInfo($webinar_id);
        return $response;
    }

    /**
     * Operation listPastWebinarQAWithHttpInfo
     *
     * List Q&A of Past Webinar
     *
     * @param  string $webinar_id The Webinar ID or Webinar UUID. If the webinar ID is passed, it will take the last webinar instance. (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Weble\Zoom\Model\InlineResponse20086, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPastWebinarQAWithHttpInfo($webinar_id)
    {
        $returnType = '\\' . \Weble\Zoom\Model\InlineResponse20086::class;
        $request = $this->listPastWebinarQARequest($webinar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\\' . \SplFileObject::class) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\\' . \Weble\Zoom\Model\InlineResponse20086::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPastWebinarQAAsync
     *
     * List Q&A of Past Webinar
     *
     * @param  string $webinar_id The Webinar ID or Webinar UUID. If the webinar ID is passed, it will take the last webinar instance. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPastWebinarQAAsync($webinar_id)
    {
        return $this->listPastWebinarQAAsyncWithHttpInfo($webinar_id)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation listPastWebinarQAAsyncWithHttpInfo
     *
     * List Q&A of Past Webinar
     *
     * @param  string $webinar_id The Webinar ID or Webinar UUID. If the webinar ID is passed, it will take the last webinar instance. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPastWebinarQAAsyncWithHttpInfo($webinar_id)
    {
        $returnType = '\\' . \Weble\Zoom\Model\InlineResponse20086::class;
        $request = $this->listPastWebinarQARequest($webinar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\\' . \SplFileObject::class) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPastWebinarQA'
     *
     * @param  string $webinar_id The Webinar ID or Webinar UUID. If the webinar ID is passed, it will take the last webinar instance. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listPastWebinarQARequest($webinar_id)
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling listPastWebinarQA'
            );
        }

        $resourcePath = '/past_webinars/{webinarId}/qa';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pastWebinars
     *
     * List Past Webinar Instances
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function pastWebinars($webinar_id)
    {
        [$response] = $this->pastWebinarsWithHttpInfo($webinar_id);
        return $response;
    }

    /**
     * Operation pastWebinarsWithHttpInfo
     *
     * List Past Webinar Instances
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function pastWebinarsWithHttpInfo($webinar_id)
    {
        $returnType = 'object';
        $request = $this->pastWebinarsRequest($webinar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\\' . \SplFileObject::class) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pastWebinarsAsync
     *
     * List Past Webinar Instances
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pastWebinarsAsync($webinar_id)
    {
        return $this->pastWebinarsAsyncWithHttpInfo($webinar_id)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation pastWebinarsAsyncWithHttpInfo
     *
     * List Past Webinar Instances
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pastWebinarsAsyncWithHttpInfo($webinar_id)
    {
        $returnType = 'object';
        $request = $this->pastWebinarsRequest($webinar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\\' . \SplFileObject::class) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pastWebinars'
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pastWebinarsRequest($webinar_id)
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling pastWebinars'
            );
        }

        $resourcePath = '/past_webinars/{webinarId}/instances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webinar
     *
     * Get a Webinar
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $occurrence_id Unique Identifier that identifies an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences. When you create a recurring Webinar using [Create a Webinar API](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarcreate), you can retrieve the Occurrence ID from the response of the API call. (optional)
     * @param  bool $show_previous_occurrences Set the value of this field to &#x60;true&#x60; if you would like to view Webinar details of all previous occurrences of a recurring Webinar. (optional)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Weble\Zoom\Model\InlineResponse20054
     */
    public function webinar($webinar_id, $occurrence_id = null, $show_previous_occurrences = null)
    {
        [$response] = $this->webinarWithHttpInfo($webinar_id, $occurrence_id, $show_previous_occurrences);
        return $response;
    }

    /**
     * Operation webinarWithHttpInfo
     *
     * Get a Webinar
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $occurrence_id Unique Identifier that identifies an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences. When you create a recurring Webinar using [Create a Webinar API](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarcreate), you can retrieve the Occurrence ID from the response of the API call. (optional)
     * @param  bool $show_previous_occurrences Set the value of this field to &#x60;true&#x60; if you would like to view Webinar details of all previous occurrences of a recurring Webinar. (optional)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Weble\Zoom\Model\InlineResponse20054, HTTP status code, HTTP response headers (array of strings)
     */
    public function webinarWithHttpInfo($webinar_id, $occurrence_id = null, $show_previous_occurrences = null)
    {
        $returnType = '\\' . \Weble\Zoom\Model\InlineResponse20054::class;
        $request = $this->webinarRequest($webinar_id, $occurrence_id, $show_previous_occurrences);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\\' . \SplFileObject::class) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\\' . \Weble\Zoom\Model\InlineResponse20054::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation webinarAsync
     *
     * Get a Webinar
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $occurrence_id Unique Identifier that identifies an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences. When you create a recurring Webinar using [Create a Webinar API](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarcreate), you can retrieve the Occurrence ID from the response of the API call. (optional)
     * @param  bool $show_previous_occurrences Set the value of this field to &#x60;true&#x60; if you would like to view Webinar details of all previous occurrences of a recurring Webinar. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarAsync($webinar_id, $occurrence_id = null, $show_previous_occurrences = null)
    {
        return $this->webinarAsyncWithHttpInfo($webinar_id, $occurrence_id, $show_previous_occurrences)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation webinarAsyncWithHttpInfo
     *
     * Get a Webinar
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $occurrence_id Unique Identifier that identifies an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences. When you create a recurring Webinar using [Create a Webinar API](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarcreate), you can retrieve the Occurrence ID from the response of the API call. (optional)
     * @param  bool $show_previous_occurrences Set the value of this field to &#x60;true&#x60; if you would like to view Webinar details of all previous occurrences of a recurring Webinar. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarAsyncWithHttpInfo($webinar_id, $occurrence_id = null, $show_previous_occurrences = null)
    {
        $returnType = '\\' . \Weble\Zoom\Model\InlineResponse20054::class;
        $request = $this->webinarRequest($webinar_id, $occurrence_id, $show_previous_occurrences);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\\' . \SplFileObject::class) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webinar'
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $occurrence_id Unique Identifier that identifies an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences. When you create a recurring Webinar using [Create a Webinar API](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarcreate), you can retrieve the Occurrence ID from the response of the API call. (optional)
     * @param  bool $show_previous_occurrences Set the value of this field to &#x60;true&#x60; if you would like to view Webinar details of all previous occurrences of a recurring Webinar. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webinarRequest($webinar_id, $occurrence_id = null, $show_previous_occurrences = null)
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling webinar'
            );
        }

        $resourcePath = '/webinars/{webinarId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($occurrence_id !== null) {
            $queryParams['occurrence_id'] = ObjectSerializer::toQueryValue($occurrence_id);
        }
        // query params
        if ($show_previous_occurrences !== null) {
            $queryParams['show_previous_occurrences'] = ObjectSerializer::toQueryValue($show_previous_occurrences);
        }

        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webinarAbsentees
     *
     * Get Webinar Absentees
     *
     * @param  string $webinar_uuid The webinar UUID. Please double encode your UUID when using it for API calls if the UUID begins with a &#39;/&#39; or contains &#39;//&#39; in it. (required)
     * @param  string $occurrence_id The meeting occurrence ID. (optional)
     * @param  int $page_size The number of records returned within a single API call. (optional, default to 30)
     * @param  string $next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Weble\Zoom\Model\RegistrationList
     */
    public function webinarAbsentees($webinar_uuid, $occurrence_id = null, $page_size = '30', $next_page_token = null)
    {
        [$response] = $this->webinarAbsenteesWithHttpInfo($webinar_uuid, $occurrence_id, $page_size, $next_page_token);
        return $response;
    }

    /**
     * Operation webinarAbsenteesWithHttpInfo
     *
     * Get Webinar Absentees
     *
     * @param  string $webinar_uuid The webinar UUID. Please double encode your UUID when using it for API calls if the UUID begins with a &#39;/&#39; or contains &#39;//&#39; in it. (required)
     * @param  string $occurrence_id The meeting occurrence ID. (optional)
     * @param  int $page_size The number of records returned within a single API call. (optional, default to 30)
     * @param  string $next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Weble\Zoom\Model\RegistrationList, HTTP status code, HTTP response headers (array of strings)
     */
    public function webinarAbsenteesWithHttpInfo($webinar_uuid, $occurrence_id = null, $page_size = '30', $next_page_token = null)
    {
        $returnType = '\\' . \Weble\Zoom\Model\RegistrationList::class;
        $request = $this->webinarAbsenteesRequest($webinar_uuid, $occurrence_id, $page_size, $next_page_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\\' . \SplFileObject::class) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\\' . \Weble\Zoom\Model\RegistrationList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation webinarAbsenteesAsync
     *
     * Get Webinar Absentees
     *
     * @param  string $webinar_uuid The webinar UUID. Please double encode your UUID when using it for API calls if the UUID begins with a &#39;/&#39; or contains &#39;//&#39; in it. (required)
     * @param  string $occurrence_id The meeting occurrence ID. (optional)
     * @param  int $page_size The number of records returned within a single API call. (optional, default to 30)
     * @param  string $next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarAbsenteesAsync($webinar_uuid, $occurrence_id = null, $page_size = '30', $next_page_token = null)
    {
        return $this->webinarAbsenteesAsyncWithHttpInfo($webinar_uuid, $occurrence_id, $page_size, $next_page_token)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation webinarAbsenteesAsyncWithHttpInfo
     *
     * Get Webinar Absentees
     *
     * @param  string $webinar_uuid The webinar UUID. Please double encode your UUID when using it for API calls if the UUID begins with a &#39;/&#39; or contains &#39;//&#39; in it. (required)
     * @param  string $occurrence_id The meeting occurrence ID. (optional)
     * @param  int $page_size The number of records returned within a single API call. (optional, default to 30)
     * @param  string $next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarAbsenteesAsyncWithHttpInfo($webinar_uuid, $occurrence_id = null, $page_size = '30', $next_page_token = null)
    {
        $returnType = '\\' . \Weble\Zoom\Model\RegistrationList::class;
        $request = $this->webinarAbsenteesRequest($webinar_uuid, $occurrence_id, $page_size, $next_page_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\\' . \SplFileObject::class) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webinarAbsentees'
     *
     * @param  string $webinar_uuid The webinar UUID. Please double encode your UUID when using it for API calls if the UUID begins with a &#39;/&#39; or contains &#39;//&#39; in it. (required)
     * @param  string $occurrence_id The meeting occurrence ID. (optional)
     * @param  int $page_size The number of records returned within a single API call. (optional, default to 30)
     * @param  string $next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webinarAbsenteesRequest($webinar_uuid, $occurrence_id = null, $page_size = '30', $next_page_token = null)
    {
        // verify the required parameter 'webinar_uuid' is set
        if ($webinar_uuid === null || (is_array($webinar_uuid) && count($webinar_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_uuid when calling webinarAbsentees'
            );
        }
        if ($page_size !== null && $page_size > 300) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling WebinarsApi.webinarAbsentees, must be smaller than or equal to 300.');
        }


        $resourcePath = '/past_webinars/{WebinarUUID}/absentees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($occurrence_id !== null) {
            $queryParams['occurrence_id'] = ObjectSerializer::toQueryValue($occurrence_id);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = ObjectSerializer::toQueryValue($next_page_token);
        }

        // path params
        if ($webinar_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'WebinarUUID' . '}',
                ObjectSerializer::toPathValue($webinar_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webinarCreate
     *
     * Create a Webinar
     *
     * @param  string $user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId. (required)
     * @param  object $body body (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Weble\Zoom\Model\InlineResponse20118
     */
    public function webinarCreate($user_id, $body)
    {
        [$response] = $this->webinarCreateWithHttpInfo($user_id, $body);
        return $response;
    }

    /**
     * Operation webinarCreateWithHttpInfo
     *
     * Create a Webinar
     *
     * @param  string $user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId. (required)
     * @param  object $body (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Weble\Zoom\Model\InlineResponse20118, HTTP status code, HTTP response headers (array of strings)
     */
    public function webinarCreateWithHttpInfo($user_id, $body)
    {
        $returnType = '\\' . \Weble\Zoom\Model\InlineResponse20118::class;
        $request = $this->webinarCreateRequest($user_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\\' . \SplFileObject::class) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\\' . \Weble\Zoom\Model\InlineResponse20118::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation webinarCreateAsync
     *
     * Create a Webinar
     *
     * @param  string $user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId. (required)
     * @param  object $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarCreateAsync($user_id, $body)
    {
        return $this->webinarCreateAsyncWithHttpInfo($user_id, $body)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation webinarCreateAsyncWithHttpInfo
     *
     * Create a Webinar
     *
     * @param  string $user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId. (required)
     * @param  object $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarCreateAsyncWithHttpInfo($user_id, $body)
    {
        $returnType = '\\' . \Weble\Zoom\Model\InlineResponse20118::class;
        $request = $this->webinarCreateRequest($user_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\\' . \SplFileObject::class) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webinarCreate'
     *
     * @param  string $user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId. (required)
     * @param  object $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webinarCreateRequest($user_id, $body)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling webinarCreate'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling webinarCreate'
            );
        }

        $resourcePath = '/users/{userId}/webinars';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webinarDelete
     *
     * Delete a Webinar
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $occurrence_id The meeting occurrence ID. (optional)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function webinarDelete($webinar_id, $occurrence_id = null)
    {
        $this->webinarDeleteWithHttpInfo($webinar_id, $occurrence_id);
    }

    /**
     * Operation webinarDeleteWithHttpInfo
     *
     * Delete a Webinar
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $occurrence_id The meeting occurrence ID. (optional)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function webinarDeleteWithHttpInfo($webinar_id, $occurrence_id = null)
    {
        $returnType = '';
        $request = $this->webinarDeleteRequest($webinar_id, $occurrence_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation webinarDeleteAsync
     *
     * Delete a Webinar
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $occurrence_id The meeting occurrence ID. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarDeleteAsync($webinar_id, $occurrence_id = null)
    {
        return $this->webinarDeleteAsyncWithHttpInfo($webinar_id, $occurrence_id)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation webinarDeleteAsyncWithHttpInfo
     *
     * Delete a Webinar
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $occurrence_id The meeting occurrence ID. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarDeleteAsyncWithHttpInfo($webinar_id, $occurrence_id = null)
    {
        $returnType = '';
        $request = $this->webinarDeleteRequest($webinar_id, $occurrence_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                fn($response) => [null, $response->getStatusCode(), $response->getHeaders()],
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webinarDelete'
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $occurrence_id The meeting occurrence ID. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webinarDeleteRequest($webinar_id, $occurrence_id = null)
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling webinarDelete'
            );
        }

        $resourcePath = '/webinars/{webinarId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($occurrence_id !== null) {
            $queryParams['occurrence_id'] = ObjectSerializer::toQueryValue($occurrence_id);
        }

        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webinarPanelistCreate
     *
     * Add Panelists
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  \Weble\Zoom\Model\Body37 $body body (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function webinarPanelistCreate($webinar_id, $body)
    {
        $this->webinarPanelistCreateWithHttpInfo($webinar_id, $body);
    }

    /**
     * Operation webinarPanelistCreateWithHttpInfo
     *
     * Add Panelists
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  \Weble\Zoom\Model\Body37 $body (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function webinarPanelistCreateWithHttpInfo($webinar_id, $body)
    {
        $returnType = '';
        $request = $this->webinarPanelistCreateRequest($webinar_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\\' . \Weble\Zoom\Model\InlineResponse20119::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation webinarPanelistCreateAsync
     *
     * Add Panelists
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  \Weble\Zoom\Model\Body37 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarPanelistCreateAsync($webinar_id, $body)
    {
        return $this->webinarPanelistCreateAsyncWithHttpInfo($webinar_id, $body)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation webinarPanelistCreateAsyncWithHttpInfo
     *
     * Add Panelists
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  \Weble\Zoom\Model\Body37 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarPanelistCreateAsyncWithHttpInfo($webinar_id, $body)
    {
        $returnType = '';
        $request = $this->webinarPanelistCreateRequest($webinar_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                fn($response) => [null, $response->getStatusCode(), $response->getHeaders()],
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webinarPanelistCreate'
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  \Weble\Zoom\Model\Body37 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webinarPanelistCreateRequest($webinar_id, $body)
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling webinarPanelistCreate'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling webinarPanelistCreate'
            );
        }

        $resourcePath = '/webinars/{webinarId}/panelists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webinarPanelistDelete
     *
     * Remove a Panelist
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  int $panelist_id The panelist ID or panelist email. (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function webinarPanelistDelete($webinar_id, $panelist_id)
    {
        $this->webinarPanelistDeleteWithHttpInfo($webinar_id, $panelist_id);
    }

    /**
     * Operation webinarPanelistDeleteWithHttpInfo
     *
     * Remove a Panelist
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  int $panelist_id The panelist ID or panelist email. (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function webinarPanelistDeleteWithHttpInfo($webinar_id, $panelist_id)
    {
        $returnType = '';
        $request = $this->webinarPanelistDeleteRequest($webinar_id, $panelist_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation webinarPanelistDeleteAsync
     *
     * Remove a Panelist
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  int $panelist_id The panelist ID or panelist email. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarPanelistDeleteAsync($webinar_id, $panelist_id)
    {
        return $this->webinarPanelistDeleteAsyncWithHttpInfo($webinar_id, $panelist_id)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation webinarPanelistDeleteAsyncWithHttpInfo
     *
     * Remove a Panelist
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  int $panelist_id The panelist ID or panelist email. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarPanelistDeleteAsyncWithHttpInfo($webinar_id, $panelist_id)
    {
        $returnType = '';
        $request = $this->webinarPanelistDeleteRequest($webinar_id, $panelist_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                fn($response) => [null, $response->getStatusCode(), $response->getHeaders()],
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webinarPanelistDelete'
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  int $panelist_id The panelist ID or panelist email. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webinarPanelistDeleteRequest($webinar_id, $panelist_id)
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling webinarPanelistDelete'
            );
        }
        // verify the required parameter 'panelist_id' is set
        if ($panelist_id === null || (is_array($panelist_id) && count($panelist_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $panelist_id when calling webinarPanelistDelete'
            );
        }

        $resourcePath = '/webinars/{webinarId}/panelists/{panelistId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }
        // path params
        if ($panelist_id !== null) {
            $resourcePath = str_replace(
                '{' . 'panelistId' . '}',
                ObjectSerializer::toPathValue($panelist_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webinarPanelists
     *
     * List Panelists
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Weble\Zoom\Model\InlineResponse20055
     */
    public function webinarPanelists($webinar_id)
    {
        [$response] = $this->webinarPanelistsWithHttpInfo($webinar_id);
        return $response;
    }

    /**
     * Operation webinarPanelistsWithHttpInfo
     *
     * List Panelists
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Weble\Zoom\Model\InlineResponse20055, HTTP status code, HTTP response headers (array of strings)
     */
    public function webinarPanelistsWithHttpInfo($webinar_id)
    {
        $returnType = '\\' . \Weble\Zoom\Model\InlineResponse20055::class;
        $request = $this->webinarPanelistsRequest($webinar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\\' . \SplFileObject::class) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\\' . \Weble\Zoom\Model\InlineResponse20055::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation webinarPanelistsAsync
     *
     * List Panelists
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarPanelistsAsync($webinar_id)
    {
        return $this->webinarPanelistsAsyncWithHttpInfo($webinar_id)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation webinarPanelistsAsyncWithHttpInfo
     *
     * List Panelists
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarPanelistsAsyncWithHttpInfo($webinar_id)
    {
        $returnType = '\\' . \Weble\Zoom\Model\InlineResponse20055::class;
        $request = $this->webinarPanelistsRequest($webinar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\\' . \SplFileObject::class) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webinarPanelists'
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webinarPanelistsRequest($webinar_id)
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling webinarPanelists'
            );
        }

        $resourcePath = '/webinars/{webinarId}/panelists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webinarPanelistsDelete
     *
     * Remove Panelists
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function webinarPanelistsDelete($webinar_id)
    {
        $this->webinarPanelistsDeleteWithHttpInfo($webinar_id);
    }

    /**
     * Operation webinarPanelistsDeleteWithHttpInfo
     *
     * Remove Panelists
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function webinarPanelistsDeleteWithHttpInfo($webinar_id)
    {
        $returnType = '';
        $request = $this->webinarPanelistsDeleteRequest($webinar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation webinarPanelistsDeleteAsync
     *
     * Remove Panelists
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarPanelistsDeleteAsync($webinar_id)
    {
        return $this->webinarPanelistsDeleteAsyncWithHttpInfo($webinar_id)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation webinarPanelistsDeleteAsyncWithHttpInfo
     *
     * Remove Panelists
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarPanelistsDeleteAsyncWithHttpInfo($webinar_id)
    {
        $returnType = '';
        $request = $this->webinarPanelistsDeleteRequest($webinar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                fn($response) => [null, $response->getStatusCode(), $response->getHeaders()],
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webinarPanelistsDelete'
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webinarPanelistsDeleteRequest($webinar_id)
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling webinarPanelistsDelete'
            );
        }

        $resourcePath = '/webinars/{webinarId}/panelists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webinarPollCreate
     *
     * Create a Webinar's Poll
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  object $body Webinar poll object (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Weble\Zoom\Model\InlineResponse20121
     */
    public function webinarPollCreate($webinar_id, $body)
    {
        [$response] = $this->webinarPollCreateWithHttpInfo($webinar_id, $body);
        return $response;
    }

    /**
     * Operation webinarPollCreateWithHttpInfo
     *
     * Create a Webinar's Poll
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  object $body Webinar poll object (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Weble\Zoom\Model\InlineResponse20121, HTTP status code, HTTP response headers (array of strings)
     */
    public function webinarPollCreateWithHttpInfo($webinar_id, $body)
    {
        $returnType = '\\' . \Weble\Zoom\Model\InlineResponse20121::class;
        $request = $this->webinarPollCreateRequest($webinar_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\\' . \SplFileObject::class) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\\' . \Weble\Zoom\Model\InlineResponse20121::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation webinarPollCreateAsync
     *
     * Create a Webinar's Poll
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  object $body Webinar poll object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarPollCreateAsync($webinar_id, $body)
    {
        return $this->webinarPollCreateAsyncWithHttpInfo($webinar_id, $body)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation webinarPollCreateAsyncWithHttpInfo
     *
     * Create a Webinar's Poll
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  object $body Webinar poll object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarPollCreateAsyncWithHttpInfo($webinar_id, $body)
    {
        $returnType = '\\' . \Weble\Zoom\Model\InlineResponse20121::class;
        $request = $this->webinarPollCreateRequest($webinar_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\\' . \SplFileObject::class) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webinarPollCreate'
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  object $body Webinar poll object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webinarPollCreateRequest($webinar_id, $body)
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling webinarPollCreate'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling webinarPollCreate'
            );
        }

        $resourcePath = '/webinars/{webinarId}/polls';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webinarPollDelete
     *
     * Delete a Webinar Poll
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $poll_id The poll ID (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function webinarPollDelete($webinar_id, $poll_id)
    {
        $this->webinarPollDeleteWithHttpInfo($webinar_id, $poll_id);
    }

    /**
     * Operation webinarPollDeleteWithHttpInfo
     *
     * Delete a Webinar Poll
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $poll_id The poll ID (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function webinarPollDeleteWithHttpInfo($webinar_id, $poll_id)
    {
        $returnType = '';
        $request = $this->webinarPollDeleteRequest($webinar_id, $poll_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation webinarPollDeleteAsync
     *
     * Delete a Webinar Poll
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $poll_id The poll ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarPollDeleteAsync($webinar_id, $poll_id)
    {
        return $this->webinarPollDeleteAsyncWithHttpInfo($webinar_id, $poll_id)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation webinarPollDeleteAsyncWithHttpInfo
     *
     * Delete a Webinar Poll
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $poll_id The poll ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarPollDeleteAsyncWithHttpInfo($webinar_id, $poll_id)
    {
        $returnType = '';
        $request = $this->webinarPollDeleteRequest($webinar_id, $poll_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                fn($response) => [null, $response->getStatusCode(), $response->getHeaders()],
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webinarPollDelete'
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $poll_id The poll ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webinarPollDeleteRequest($webinar_id, $poll_id)
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling webinarPollDelete'
            );
        }
        // verify the required parameter 'poll_id' is set
        if ($poll_id === null || (is_array($poll_id) && count($poll_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $poll_id when calling webinarPollDelete'
            );
        }

        $resourcePath = '/webinars/{webinarId}/polls/{pollId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }
        // path params
        if ($poll_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pollId' . '}',
                ObjectSerializer::toPathValue($poll_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webinarPollGet
     *
     * Get a Webinar Poll
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $poll_id The poll ID (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Weble\Zoom\Model\InlineResponse20121
     */
    public function webinarPollGet($webinar_id, $poll_id)
    {
        [$response] = $this->webinarPollGetWithHttpInfo($webinar_id, $poll_id);
        return $response;
    }

    /**
     * Operation webinarPollGetWithHttpInfo
     *
     * Get a Webinar Poll
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $poll_id The poll ID (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Weble\Zoom\Model\InlineResponse20121, HTTP status code, HTTP response headers (array of strings)
     */
    public function webinarPollGetWithHttpInfo($webinar_id, $poll_id)
    {
        $returnType = '\\' . \Weble\Zoom\Model\InlineResponse20121::class;
        $request = $this->webinarPollGetRequest($webinar_id, $poll_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\\' . \SplFileObject::class) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\\' . \Weble\Zoom\Model\InlineResponse20121::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation webinarPollGetAsync
     *
     * Get a Webinar Poll
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $poll_id The poll ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarPollGetAsync($webinar_id, $poll_id)
    {
        return $this->webinarPollGetAsyncWithHttpInfo($webinar_id, $poll_id)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation webinarPollGetAsyncWithHttpInfo
     *
     * Get a Webinar Poll
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $poll_id The poll ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarPollGetAsyncWithHttpInfo($webinar_id, $poll_id)
    {
        $returnType = '\\' . \Weble\Zoom\Model\InlineResponse20121::class;
        $request = $this->webinarPollGetRequest($webinar_id, $poll_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\\' . \SplFileObject::class) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webinarPollGet'
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $poll_id The poll ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webinarPollGetRequest($webinar_id, $poll_id)
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling webinarPollGet'
            );
        }
        // verify the required parameter 'poll_id' is set
        if ($poll_id === null || (is_array($poll_id) && count($poll_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $poll_id when calling webinarPollGet'
            );
        }

        $resourcePath = '/webinars/{webinarId}/polls/{pollId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }
        // path params
        if ($poll_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pollId' . '}',
                ObjectSerializer::toPathValue($poll_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webinarPollUpdate
     *
     * Update a Webinar Poll
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $poll_id The poll ID (required)
     * @param  object $body Webinar Poll (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function webinarPollUpdate($webinar_id, $poll_id, $body)
    {
        $this->webinarPollUpdateWithHttpInfo($webinar_id, $poll_id, $body);
    }

    /**
     * Operation webinarPollUpdateWithHttpInfo
     *
     * Update a Webinar Poll
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $poll_id The poll ID (required)
     * @param  object $body Webinar Poll (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function webinarPollUpdateWithHttpInfo($webinar_id, $poll_id, $body)
    {
        $returnType = '';
        $request = $this->webinarPollUpdateRequest($webinar_id, $poll_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation webinarPollUpdateAsync
     *
     * Update a Webinar Poll
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $poll_id The poll ID (required)
     * @param  object $body Webinar Poll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarPollUpdateAsync($webinar_id, $poll_id, $body)
    {
        return $this->webinarPollUpdateAsyncWithHttpInfo($webinar_id, $poll_id, $body)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation webinarPollUpdateAsyncWithHttpInfo
     *
     * Update a Webinar Poll
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $poll_id The poll ID (required)
     * @param  object $body Webinar Poll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarPollUpdateAsyncWithHttpInfo($webinar_id, $poll_id, $body)
    {
        $returnType = '';
        $request = $this->webinarPollUpdateRequest($webinar_id, $poll_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                fn($response) => [null, $response->getStatusCode(), $response->getHeaders()],
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webinarPollUpdate'
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $poll_id The poll ID (required)
     * @param  object $body Webinar Poll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webinarPollUpdateRequest($webinar_id, $poll_id, $body)
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling webinarPollUpdate'
            );
        }
        // verify the required parameter 'poll_id' is set
        if ($poll_id === null || (is_array($poll_id) && count($poll_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $poll_id when calling webinarPollUpdate'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling webinarPollUpdate'
            );
        }

        $resourcePath = '/webinars/{webinarId}/polls/{pollId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }
        // path params
        if ($poll_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pollId' . '}',
                ObjectSerializer::toPathValue($poll_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webinarPolls
     *
     * List a Webinar's Polls
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function webinarPolls($webinar_id)
    {
        [$response] = $this->webinarPollsWithHttpInfo($webinar_id);
        return $response;
    }

    /**
     * Operation webinarPollsWithHttpInfo
     *
     * List a Webinar's Polls
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function webinarPollsWithHttpInfo($webinar_id)
    {
        $returnType = 'object';
        $request = $this->webinarPollsRequest($webinar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\\' . \SplFileObject::class) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation webinarPollsAsync
     *
     * List a Webinar's Polls
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarPollsAsync($webinar_id)
    {
        return $this->webinarPollsAsyncWithHttpInfo($webinar_id)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation webinarPollsAsyncWithHttpInfo
     *
     * List a Webinar's Polls
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarPollsAsyncWithHttpInfo($webinar_id)
    {
        $returnType = 'object';
        $request = $this->webinarPollsRequest($webinar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\\' . \SplFileObject::class) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webinarPolls'
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webinarPollsRequest($webinar_id)
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling webinarPolls'
            );
        }

        $resourcePath = '/webinars/{webinarId}/polls';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webinarRegistrantCreate
     *
     * Add a Webinar Registrant
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  object $body body (required)
     * @param  string $occurrence_ids Occurrence ID. Get this value from the webinar get API. Multiple values separated by a comma. (optional)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Weble\Zoom\Model\InlineResponse20120
     */
    public function webinarRegistrantCreate($webinar_id, $body, $occurrence_ids = null)
    {
        [$response] = $this->webinarRegistrantCreateWithHttpInfo($webinar_id, $body, $occurrence_ids);
        return $response;
    }

    /**
     * Operation webinarRegistrantCreateWithHttpInfo
     *
     * Add a Webinar Registrant
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  object $body (required)
     * @param  string $occurrence_ids Occurrence ID. Get this value from the webinar get API. Multiple values separated by a comma. (optional)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Weble\Zoom\Model\InlineResponse20120, HTTP status code, HTTP response headers (array of strings)
     */
    public function webinarRegistrantCreateWithHttpInfo($webinar_id, $body, $occurrence_ids = null)
    {
        $returnType = '\\' . \Weble\Zoom\Model\InlineResponse20120::class;
        $request = $this->webinarRegistrantCreateRequest($webinar_id, $body, $occurrence_ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\\' . \SplFileObject::class) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\\' . \Weble\Zoom\Model\InlineResponse20120::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation webinarRegistrantCreateAsync
     *
     * Add a Webinar Registrant
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  object $body (required)
     * @param  string $occurrence_ids Occurrence ID. Get this value from the webinar get API. Multiple values separated by a comma. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarRegistrantCreateAsync($webinar_id, $body, $occurrence_ids = null)
    {
        return $this->webinarRegistrantCreateAsyncWithHttpInfo($webinar_id, $body, $occurrence_ids)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation webinarRegistrantCreateAsyncWithHttpInfo
     *
     * Add a Webinar Registrant
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  object $body (required)
     * @param  string $occurrence_ids Occurrence ID. Get this value from the webinar get API. Multiple values separated by a comma. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarRegistrantCreateAsyncWithHttpInfo($webinar_id, $body, $occurrence_ids = null)
    {
        $returnType = '\\' . \Weble\Zoom\Model\InlineResponse20120::class;
        $request = $this->webinarRegistrantCreateRequest($webinar_id, $body, $occurrence_ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\\' . \SplFileObject::class) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webinarRegistrantCreate'
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  object $body (required)
     * @param  string $occurrence_ids Occurrence ID. Get this value from the webinar get API. Multiple values separated by a comma. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webinarRegistrantCreateRequest($webinar_id, $body, $occurrence_ids = null)
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling webinarRegistrantCreate'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling webinarRegistrantCreate'
            );
        }

        $resourcePath = '/webinars/{webinarId}/registrants';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($occurrence_ids !== null) {
            $queryParams['occurrence_ids'] = ObjectSerializer::toQueryValue($occurrence_ids);
        }

        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webinarRegistrantGet
     *
     * Get a Webinar Registrant
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $registrant_id The registrant ID. (required)
     * @param  string $occurrence_id The meeting occurrence ID. (optional)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Weble\Zoom\Model\WebianrRegistrant
     */
    public function webinarRegistrantGet($webinar_id, $registrant_id, $occurrence_id = null)
    {
        [$response] = $this->webinarRegistrantGetWithHttpInfo($webinar_id, $registrant_id, $occurrence_id);
        return $response;
    }

    /**
     * Operation webinarRegistrantGetWithHttpInfo
     *
     * Get a Webinar Registrant
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $registrant_id The registrant ID. (required)
     * @param  string $occurrence_id The meeting occurrence ID. (optional)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Weble\Zoom\Model\WebianrRegistrant, HTTP status code, HTTP response headers (array of strings)
     */
    public function webinarRegistrantGetWithHttpInfo($webinar_id, $registrant_id, $occurrence_id = null)
    {
        $returnType = '\\' . \Weble\Zoom\Model\WebianrRegistrant::class;
        $request = $this->webinarRegistrantGetRequest($webinar_id, $registrant_id, $occurrence_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\\' . \SplFileObject::class) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\\' . \Weble\Zoom\Model\WebianrRegistrant::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation webinarRegistrantGetAsync
     *
     * Get a Webinar Registrant
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $registrant_id The registrant ID. (required)
     * @param  string $occurrence_id The meeting occurrence ID. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarRegistrantGetAsync($webinar_id, $registrant_id, $occurrence_id = null)
    {
        return $this->webinarRegistrantGetAsyncWithHttpInfo($webinar_id, $registrant_id, $occurrence_id)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation webinarRegistrantGetAsyncWithHttpInfo
     *
     * Get a Webinar Registrant
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $registrant_id The registrant ID. (required)
     * @param  string $occurrence_id The meeting occurrence ID. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarRegistrantGetAsyncWithHttpInfo($webinar_id, $registrant_id, $occurrence_id = null)
    {
        $returnType = '\\' . \Weble\Zoom\Model\WebianrRegistrant::class;
        $request = $this->webinarRegistrantGetRequest($webinar_id, $registrant_id, $occurrence_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\\' . \SplFileObject::class) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webinarRegistrantGet'
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $registrant_id The registrant ID. (required)
     * @param  string $occurrence_id The meeting occurrence ID. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webinarRegistrantGetRequest($webinar_id, $registrant_id, $occurrence_id = null)
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling webinarRegistrantGet'
            );
        }
        // verify the required parameter 'registrant_id' is set
        if ($registrant_id === null || (is_array($registrant_id) && count($registrant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $registrant_id when calling webinarRegistrantGet'
            );
        }

        $resourcePath = '/webinars/{webinarId}/registrants/{registrantId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($occurrence_id !== null) {
            $queryParams['occurrence_id'] = ObjectSerializer::toQueryValue($occurrence_id);
        }

        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }
        // path params
        if ($registrant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'registrantId' . '}',
                ObjectSerializer::toPathValue($registrant_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webinarRegistrantQuestionUpdate
     *
     * Update Registration Questions
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  object $body Webinar Registrant Questions (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function webinarRegistrantQuestionUpdate($webinar_id, $body)
    {
        $this->webinarRegistrantQuestionUpdateWithHttpInfo($webinar_id, $body);
    }

    /**
     * Operation webinarRegistrantQuestionUpdateWithHttpInfo
     *
     * Update Registration Questions
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  object $body Webinar Registrant Questions (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function webinarRegistrantQuestionUpdateWithHttpInfo($webinar_id, $body)
    {
        $returnType = '';
        $request = $this->webinarRegistrantQuestionUpdateRequest($webinar_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation webinarRegistrantQuestionUpdateAsync
     *
     * Update Registration Questions
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  object $body Webinar Registrant Questions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarRegistrantQuestionUpdateAsync($webinar_id, $body)
    {
        return $this->webinarRegistrantQuestionUpdateAsyncWithHttpInfo($webinar_id, $body)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation webinarRegistrantQuestionUpdateAsyncWithHttpInfo
     *
     * Update Registration Questions
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  object $body Webinar Registrant Questions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarRegistrantQuestionUpdateAsyncWithHttpInfo($webinar_id, $body)
    {
        $returnType = '';
        $request = $this->webinarRegistrantQuestionUpdateRequest($webinar_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                fn($response) => [null, $response->getStatusCode(), $response->getHeaders()],
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webinarRegistrantQuestionUpdate'
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  object $body Webinar Registrant Questions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webinarRegistrantQuestionUpdateRequest($webinar_id, $body)
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling webinarRegistrantQuestionUpdate'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling webinarRegistrantQuestionUpdate'
            );
        }

        $resourcePath = '/webinars/{webinarId}/registrants/questions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webinarRegistrantStatus
     *
     * Update Webinar Registrant Status
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  \Weble\Zoom\Model\Body38 $body body (required)
     * @param  string $occurrence_id The meeting occurrence ID. (optional)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function webinarRegistrantStatus($webinar_id, $body, $occurrence_id = null)
    {
        $this->webinarRegistrantStatusWithHttpInfo($webinar_id, $body, $occurrence_id);
    }

    /**
     * Operation webinarRegistrantStatusWithHttpInfo
     *
     * Update Webinar Registrant Status
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  \Weble\Zoom\Model\Body38 $body (required)
     * @param  string $occurrence_id The meeting occurrence ID. (optional)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function webinarRegistrantStatusWithHttpInfo($webinar_id, $body, $occurrence_id = null)
    {
        $returnType = '';
        $request = $this->webinarRegistrantStatusRequest($webinar_id, $body, $occurrence_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation webinarRegistrantStatusAsync
     *
     * Update Webinar Registrant Status
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  \Weble\Zoom\Model\Body38 $body (required)
     * @param  string $occurrence_id The meeting occurrence ID. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarRegistrantStatusAsync($webinar_id, $body, $occurrence_id = null)
    {
        return $this->webinarRegistrantStatusAsyncWithHttpInfo($webinar_id, $body, $occurrence_id)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation webinarRegistrantStatusAsyncWithHttpInfo
     *
     * Update Webinar Registrant Status
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  \Weble\Zoom\Model\Body38 $body (required)
     * @param  string $occurrence_id The meeting occurrence ID. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarRegistrantStatusAsyncWithHttpInfo($webinar_id, $body, $occurrence_id = null)
    {
        $returnType = '';
        $request = $this->webinarRegistrantStatusRequest($webinar_id, $body, $occurrence_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                fn($response) => [null, $response->getStatusCode(), $response->getHeaders()],
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webinarRegistrantStatus'
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  \Weble\Zoom\Model\Body38 $body (required)
     * @param  string $occurrence_id The meeting occurrence ID. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webinarRegistrantStatusRequest($webinar_id, $body, $occurrence_id = null)
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling webinarRegistrantStatus'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling webinarRegistrantStatus'
            );
        }

        $resourcePath = '/webinars/{webinarId}/registrants/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($occurrence_id !== null) {
            $queryParams['occurrence_id'] = ObjectSerializer::toQueryValue($occurrence_id);
        }

        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webinarRegistrants
     *
     * List Webinar Registrants
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $occurrence_id The meeting occurrence ID. (optional)
     * @param  string $status The registrant status:&lt;br&gt;&#x60;pending&#x60; - Registrant&#39;s status is pending.&lt;br&gt;&#x60;approved&#x60; - Registrant&#39;s status is approved.&lt;br&gt;&#x60;denied&#x60; - Registrant&#39;s status is denied. (optional, default to approved)
     * @param  int $page_size The number of records returned within a single API call. (optional, default to 30)
     * @param  int $page_number The current page number of returned records. (optional, default to 1)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Weble\Zoom\Model\RegistrationList
     */
    public function webinarRegistrants($webinar_id, $occurrence_id = null, $status = 'approved', $page_size = '30', $page_number = '1')
    {
        [$response] = $this->webinarRegistrantsWithHttpInfo($webinar_id, $occurrence_id, $status, $page_size, $page_number);
        return $response;
    }

    /**
     * Operation webinarRegistrantsWithHttpInfo
     *
     * List Webinar Registrants
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $occurrence_id The meeting occurrence ID. (optional)
     * @param  string $status The registrant status:&lt;br&gt;&#x60;pending&#x60; - Registrant&#39;s status is pending.&lt;br&gt;&#x60;approved&#x60; - Registrant&#39;s status is approved.&lt;br&gt;&#x60;denied&#x60; - Registrant&#39;s status is denied. (optional, default to approved)
     * @param  int $page_size The number of records returned within a single API call. (optional, default to 30)
     * @param  int $page_number The current page number of returned records. (optional, default to 1)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Weble\Zoom\Model\RegistrationList, HTTP status code, HTTP response headers (array of strings)
     */
    public function webinarRegistrantsWithHttpInfo($webinar_id, $occurrence_id = null, $status = 'approved', $page_size = '30', $page_number = '1')
    {
        $returnType = '\\' . \Weble\Zoom\Model\RegistrationList::class;
        $request = $this->webinarRegistrantsRequest($webinar_id, $occurrence_id, $status, $page_size, $page_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\\' . \SplFileObject::class) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\\' . \Weble\Zoom\Model\RegistrationList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation webinarRegistrantsAsync
     *
     * List Webinar Registrants
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $occurrence_id The meeting occurrence ID. (optional)
     * @param  string $status The registrant status:&lt;br&gt;&#x60;pending&#x60; - Registrant&#39;s status is pending.&lt;br&gt;&#x60;approved&#x60; - Registrant&#39;s status is approved.&lt;br&gt;&#x60;denied&#x60; - Registrant&#39;s status is denied. (optional, default to approved)
     * @param  int $page_size The number of records returned within a single API call. (optional, default to 30)
     * @param  int $page_number The current page number of returned records. (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarRegistrantsAsync($webinar_id, $occurrence_id = null, $status = 'approved', $page_size = '30', $page_number = '1')
    {
        return $this->webinarRegistrantsAsyncWithHttpInfo($webinar_id, $occurrence_id, $status, $page_size, $page_number)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation webinarRegistrantsAsyncWithHttpInfo
     *
     * List Webinar Registrants
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $occurrence_id The meeting occurrence ID. (optional)
     * @param  string $status The registrant status:&lt;br&gt;&#x60;pending&#x60; - Registrant&#39;s status is pending.&lt;br&gt;&#x60;approved&#x60; - Registrant&#39;s status is approved.&lt;br&gt;&#x60;denied&#x60; - Registrant&#39;s status is denied. (optional, default to approved)
     * @param  int $page_size The number of records returned within a single API call. (optional, default to 30)
     * @param  int $page_number The current page number of returned records. (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarRegistrantsAsyncWithHttpInfo($webinar_id, $occurrence_id = null, $status = 'approved', $page_size = '30', $page_number = '1')
    {
        $returnType = '\\' . \Weble\Zoom\Model\RegistrationList::class;
        $request = $this->webinarRegistrantsRequest($webinar_id, $occurrence_id, $status, $page_size, $page_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\\' . \SplFileObject::class) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webinarRegistrants'
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  string $occurrence_id The meeting occurrence ID. (optional)
     * @param  string $status The registrant status:&lt;br&gt;&#x60;pending&#x60; - Registrant&#39;s status is pending.&lt;br&gt;&#x60;approved&#x60; - Registrant&#39;s status is approved.&lt;br&gt;&#x60;denied&#x60; - Registrant&#39;s status is denied. (optional, default to approved)
     * @param  int $page_size The number of records returned within a single API call. (optional, default to 30)
     * @param  int $page_number The current page number of returned records. (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webinarRegistrantsRequest($webinar_id, $occurrence_id = null, $status = 'approved', $page_size = '30', $page_number = '1')
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling webinarRegistrants'
            );
        }
        if ($page_size !== null && $page_size > 300) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling WebinarsApi.webinarRegistrants, must be smaller than or equal to 300.');
        }


        $resourcePath = '/webinars/{webinarId}/registrants';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($occurrence_id !== null) {
            $queryParams['occurrence_id'] = ObjectSerializer::toQueryValue($occurrence_id);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['page_number'] = ObjectSerializer::toQueryValue($page_number);
        }

        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webinarRegistrantsQuestionsGet
     *
     * List Registration Questions
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Weble\Zoom\Model\InlineResponse20056
     */
    public function webinarRegistrantsQuestionsGet($webinar_id)
    {
        [$response] = $this->webinarRegistrantsQuestionsGetWithHttpInfo($webinar_id);
        return $response;
    }

    /**
     * Operation webinarRegistrantsQuestionsGetWithHttpInfo
     *
     * List Registration Questions
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Weble\Zoom\Model\InlineResponse20056, HTTP status code, HTTP response headers (array of strings)
     */
    public function webinarRegistrantsQuestionsGetWithHttpInfo($webinar_id)
    {
        $returnType = '\\' . \Weble\Zoom\Model\InlineResponse20056::class;
        $request = $this->webinarRegistrantsQuestionsGetRequest($webinar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\\' . \SplFileObject::class) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\\' . \Weble\Zoom\Model\InlineResponse20056::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation webinarRegistrantsQuestionsGetAsync
     *
     * List Registration Questions
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarRegistrantsQuestionsGetAsync($webinar_id)
    {
        return $this->webinarRegistrantsQuestionsGetAsyncWithHttpInfo($webinar_id)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation webinarRegistrantsQuestionsGetAsyncWithHttpInfo
     *
     * List Registration Questions
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarRegistrantsQuestionsGetAsyncWithHttpInfo($webinar_id)
    {
        $returnType = '\\' . \Weble\Zoom\Model\InlineResponse20056::class;
        $request = $this->webinarRegistrantsQuestionsGetRequest($webinar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\\' . \SplFileObject::class) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webinarRegistrantsQuestionsGet'
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webinarRegistrantsQuestionsGetRequest($webinar_id)
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling webinarRegistrantsQuestionsGet'
            );
        }

        $resourcePath = '/webinars/{webinarId}/registrants/questions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webinarStatus
     *
     * Update Webinar Status
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  \Weble\Zoom\Model\Body36 $body body (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function webinarStatus($webinar_id, $body)
    {
        $this->webinarStatusWithHttpInfo($webinar_id, $body);
    }

    /**
     * Operation webinarStatusWithHttpInfo
     *
     * Update Webinar Status
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  \Weble\Zoom\Model\Body36 $body (required)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function webinarStatusWithHttpInfo($webinar_id, $body)
    {
        $returnType = '';
        $request = $this->webinarStatusRequest($webinar_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation webinarStatusAsync
     *
     * Update Webinar Status
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  \Weble\Zoom\Model\Body36 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarStatusAsync($webinar_id, $body)
    {
        return $this->webinarStatusAsyncWithHttpInfo($webinar_id, $body)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation webinarStatusAsyncWithHttpInfo
     *
     * Update Webinar Status
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  \Weble\Zoom\Model\Body36 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarStatusAsyncWithHttpInfo($webinar_id, $body)
    {
        $returnType = '';
        $request = $this->webinarStatusRequest($webinar_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                fn($response) => [null, $response->getStatusCode(), $response->getHeaders()],
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webinarStatus'
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  \Weble\Zoom\Model\Body36 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webinarStatusRequest($webinar_id, $body)
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling webinarStatus'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling webinarStatus'
            );
        }

        $resourcePath = '/webinars/{webinarId}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webinarUpdate
     *
     * Update a Webinar
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  object $body Webinar. (required)
     * @param  string $occurrence_id Webinar occurrence id. Support change of agenda, start_time, duration, settings: {host_video, panelist_video, hd_video, watermark, auto_recording} (optional)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function webinarUpdate($webinar_id, $body, $occurrence_id = null)
    {
        $this->webinarUpdateWithHttpInfo($webinar_id, $body, $occurrence_id);
    }

    /**
     * Operation webinarUpdateWithHttpInfo
     *
     * Update a Webinar
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  object $body Webinar. (required)
     * @param  string $occurrence_id Webinar occurrence id. Support change of agenda, start_time, duration, settings: {host_video, panelist_video, hd_video, watermark, auto_recording} (optional)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function webinarUpdateWithHttpInfo($webinar_id, $body, $occurrence_id = null)
    {
        $returnType = '';
        $request = $this->webinarUpdateRequest($webinar_id, $body, $occurrence_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation webinarUpdateAsync
     *
     * Update a Webinar
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  object $body Webinar. (required)
     * @param  string $occurrence_id Webinar occurrence id. Support change of agenda, start_time, duration, settings: {host_video, panelist_video, hd_video, watermark, auto_recording} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarUpdateAsync($webinar_id, $body, $occurrence_id = null)
    {
        return $this->webinarUpdateAsyncWithHttpInfo($webinar_id, $body, $occurrence_id)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation webinarUpdateAsyncWithHttpInfo
     *
     * Update a Webinar
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  object $body Webinar. (required)
     * @param  string $occurrence_id Webinar occurrence id. Support change of agenda, start_time, duration, settings: {host_video, panelist_video, hd_video, watermark, auto_recording} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarUpdateAsyncWithHttpInfo($webinar_id, $body, $occurrence_id = null)
    {
        $returnType = '';
        $request = $this->webinarUpdateRequest($webinar_id, $body, $occurrence_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                fn($response) => [null, $response->getStatusCode(), $response->getHeaders()],
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webinarUpdate'
     *
     * @param  int $webinar_id The webinar ID in \&quot;**long**\&quot; format(represented as int64 data type in JSON). (required)
     * @param  object $body Webinar. (required)
     * @param  string $occurrence_id Webinar occurrence id. Support change of agenda, start_time, duration, settings: {host_video, panelist_video, hd_video, watermark, auto_recording} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webinarUpdateRequest($webinar_id, $body, $occurrence_id = null)
    {
        // verify the required parameter 'webinar_id' is set
        if ($webinar_id === null || (is_array($webinar_id) && count($webinar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webinar_id when calling webinarUpdate'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling webinarUpdate'
            );
        }

        $resourcePath = '/webinars/{webinarId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($occurrence_id !== null) {
            $queryParams['occurrence_id'] = ObjectSerializer::toQueryValue($occurrence_id);
        }

        // path params
        if ($webinar_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webinarId' . '}',
                ObjectSerializer::toPathValue($webinar_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webinars
     *
     * List Webinars
     *
     * @param  string $user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId. (required)
     * @param  int $page_size The number of records returned within a single API call. (optional, default to 30)
     * @param  int $page_number The current page number of returned records. (optional, default to 1)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Weble\Zoom\Model\UserList
     */
    public function webinars($user_id, $page_size = '30', $page_number = '1')
    {
        [$response] = $this->webinarsWithHttpInfo($user_id, $page_size, $page_number);
        return $response;
    }

    /**
     * Operation webinarsWithHttpInfo
     *
     * List Webinars
     *
     * @param  string $user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId. (required)
     * @param  int $page_size The number of records returned within a single API call. (optional, default to 30)
     * @param  int $page_number The current page number of returned records. (optional, default to 1)
     *
     * @throws \Weble\Zoom\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Weble\Zoom\Model\UserList, HTTP status code, HTTP response headers (array of strings)
     */
    public function webinarsWithHttpInfo($user_id, $page_size = '30', $page_number = '1')
    {
        $returnType = '\\' . \Weble\Zoom\Model\UserList::class;
        $request = $this->webinarsRequest($user_id, $page_size, $page_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\\' . \SplFileObject::class) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\\' . \Weble\Zoom\Model\UserList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation webinarsAsync
     *
     * List Webinars
     *
     * @param  string $user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId. (required)
     * @param  int $page_size The number of records returned within a single API call. (optional, default to 30)
     * @param  int $page_number The current page number of returned records. (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarsAsync($user_id, $page_size = '30', $page_number = '1')
    {
        return $this->webinarsAsyncWithHttpInfo($user_id, $page_size, $page_number)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation webinarsAsyncWithHttpInfo
     *
     * List Webinars
     *
     * @param  string $user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId. (required)
     * @param  int $page_size The number of records returned within a single API call. (optional, default to 30)
     * @param  int $page_number The current page number of returned records. (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webinarsAsyncWithHttpInfo($user_id, $page_size = '30', $page_number = '1')
    {
        $returnType = '\\' . \Weble\Zoom\Model\UserList::class;
        $request = $this->webinarsRequest($user_id, $page_size, $page_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\\' . \SplFileObject::class) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content, null, 512, JSON_THROW_ON_ERROR);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webinars'
     *
     * @param  string $user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId. (required)
     * @param  int $page_size The number of records returned within a single API call. (optional, default to 30)
     * @param  int $page_number The current page number of returned records. (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webinarsRequest($user_id, $page_size = '30', $page_number = '1')
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling webinars'
            );
        }
        if ($page_size !== null && $page_size > 300) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling WebinarsApi.webinars, must be smaller than or equal to 300.');
        }


        $resourcePath = '/users/{userId}/webinars';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['page_number'] = ObjectSerializer::toQueryValue($page_number);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
