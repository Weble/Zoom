<?php
/**
 * InlineResponse2005Contacts
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Zoom API
 *
 * The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: developersupport@zoom.us
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Weble\Zoom\Model;

use \ArrayAccess;
use \Weble\Zoom\ObjectSerializer;

/**
 * InlineResponse2005Contacts Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2005Contacts implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_5_contacts';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'email' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'presence_status' => 'string',
        'phone_number' => 'string',
        'sip_phone_number' => 'string',
        'direct_numbers' => 'string[]',
        'extension_number' => 'string',
        'im_group_id' => 'string',
        'im_group_name' => 'string',
        'dept' => 'string',
        'job_title' => 'string',
        'location' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'email' => null,
        'first_name' => null,
        'last_name' => null,
        'presence_status' => null,
        'phone_number' => null,
        'sip_phone_number' => null,
        'direct_numbers' => null,
        'extension_number' => null,
        'im_group_id' => null,
        'im_group_name' => null,
        'dept' => null,
        'job_title' => null,
        'location' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'email' => 'email',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'presence_status' => 'presence_status',
        'phone_number' => 'phone_number',
        'sip_phone_number' => 'sip_phone_number',
        'direct_numbers' => 'direct_numbers',
        'extension_number' => 'extension_number',
        'im_group_id' => 'im_group_id',
        'im_group_name' => 'im_group_name',
        'dept' => 'dept',
        'job_title' => 'job_title',
        'location' => 'location'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'email' => 'setEmail',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'presence_status' => 'setPresenceStatus',
        'phone_number' => 'setPhoneNumber',
        'sip_phone_number' => 'setSipPhoneNumber',
        'direct_numbers' => 'setDirectNumbers',
        'extension_number' => 'setExtensionNumber',
        'im_group_id' => 'setImGroupId',
        'im_group_name' => 'setImGroupName',
        'dept' => 'setDept',
        'job_title' => 'setJobTitle',
        'location' => 'setLocation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'email' => 'getEmail',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'presence_status' => 'getPresenceStatus',
        'phone_number' => 'getPhoneNumber',
        'sip_phone_number' => 'getSipPhoneNumber',
        'direct_numbers' => 'getDirectNumbers',
        'extension_number' => 'getExtensionNumber',
        'im_group_id' => 'getImGroupId',
        'im_group_name' => 'getImGroupName',
        'dept' => 'getDept',
        'job_title' => 'getJobTitle',
        'location' => 'getLocation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    public const PRESENCE_STATUS_DO_NOT_DISTURB = 'Do_Not_Disturb';
    public const PRESENCE_STATUS_AWAY = 'away';
    public const PRESENCE_STATUS_AVAILABLE = 'Available';
    public const PRESENCE_STATUS_OFFLINE = 'Offline';



    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPresenceStatusAllowableValues()
    {
        return [
            self::PRESENCE_STATUS_DO_NOT_DISTURB,
            self::PRESENCE_STATUS_AWAY,
            self::PRESENCE_STATUS_AVAILABLE,
            self::PRESENCE_STATUS_OFFLINE,
        ];
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['last_name'] = $data['last_name'] ?? null;
        $this->container['presence_status'] = $data['presence_status'] ?? null;
        $this->container['phone_number'] = $data['phone_number'] ?? null;
        $this->container['sip_phone_number'] = $data['sip_phone_number'] ?? null;
        $this->container['direct_numbers'] = $data['direct_numbers'] ?? null;
        $this->container['extension_number'] = $data['extension_number'] ?? null;
        $this->container['im_group_id'] = $data['im_group_id'] ?? null;
        $this->container['im_group_name'] = $data['im_group_name'] ?? null;
        $this->container['dept'] = $data['dept'] ?? null;
        $this->container['job_title'] = $data['job_title'] ?? null;
        $this->container['location'] = $data['location'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPresenceStatusAllowableValues();
        if (!is_null($this->container['presence_status']) && !in_array($this->container['presence_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'presence_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id User ID of the contact.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email address of the contact.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name First name of the contact.
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name Last name of the contact.
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets presence_status
     *
     * @return string
     */
    public function getPresenceStatus()
    {
        return $this->container['presence_status'];
    }

    /**
     * Sets presence_status
     *
     * @param string $presence_status Presence status of the contact in Zoom Client. The value of this field can be one of the following: `Do_Not_Disturb`<br> `away`<br> `Available`<br> `Offline`
     *
     * @return $this
     */
    public function setPresenceStatus($presence_status)
    {
        $allowedValues = $this->getPresenceStatusAllowableValues();
        if (!is_null($presence_status) && !in_array($presence_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'presence_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['presence_status'] = $presence_status;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number Phone number of the user.
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets sip_phone_number
     *
     * @return string
     */
    public function getSipPhoneNumber()
    {
        return $this->container['sip_phone_number'];
    }

    /**
     * Sets sip_phone_number
     *
     * @param string $sip_phone_number SIP Phone number of the user. Returned only if user has SIP phone enabled.
     *
     * @return $this
     */
    public function setSipPhoneNumber($sip_phone_number)
    {
        $this->container['sip_phone_number'] = $sip_phone_number;

        return $this;
    }

    /**
     * Gets direct_numbers
     *
     * @return string[]
     */
    public function getDirectNumbers()
    {
        return $this->container['direct_numbers'];
    }

    /**
     * Sets direct_numbers
     *
     * @param string[] $direct_numbers Direct Number(s) of a user who has Zoom Phone license assigned.
     *
     * @return $this
     */
    public function setDirectNumbers($direct_numbers)
    {
        $this->container['direct_numbers'] = $direct_numbers;

        return $this;
    }

    /**
     * Gets extension_number
     *
     * @return string
     */
    public function getExtensionNumber()
    {
        return $this->container['extension_number'];
    }

    /**
     * Sets extension_number
     *
     * @param string $extension_number Extension Number of a user who has Zoom Phone license assigned.
     *
     * @return $this
     */
    public function setExtensionNumber($extension_number)
    {
        $this->container['extension_number'] = $extension_number;

        return $this;
    }

    /**
     * Gets im_group_id
     *
     * @return string
     */
    public function getImGroupId()
    {
        return $this->container['im_group_id'];
    }

    /**
     * Sets im_group_id
     *
     * @param string $im_group_id Unique Identifier of the [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) in which the user has been added. An IM Directory group is not the same as a channel. IM Directory allows administrators to assign users in their account to groups that display within the Contacts list on Zoom clients.
     *
     * @return $this
     */
    public function setImGroupId($im_group_id)
    {
        $this->container['im_group_id'] = $im_group_id;

        return $this;
    }

    /**
     * Gets im_group_name
     *
     * @return string
     */
    public function getImGroupName()
    {
        return $this->container['im_group_name'];
    }

    /**
     * Sets im_group_name
     *
     * @param string $im_group_name Name of the [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) in which the user has been added. An IM Directory group is not the same as a channel. IM Directory allows administrators to assign users in their account to groups that display within the Contacts list on Zoom clients.
     *
     * @return $this
     */
    public function setImGroupName($im_group_name)
    {
        $this->container['im_group_name'] = $im_group_name;

        return $this;
    }

    /**
     * Gets dept
     *
     * @return string
     */
    public function getDept()
    {
        return $this->container['dept'];
    }

    /**
     * Sets dept
     *
     * @param string $dept Department of the contact as provided in the user's Zoom profile.
     *
     * @return $this
     */
    public function setDept($dept)
    {
        $this->container['dept'] = $dept;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string $job_title Department of the user as provided in the user's Zoom profile.
     *
     * @return $this
     */
    public function setJobTitle($job_title)
    {
        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location Location of the user as provided in the user's Zoom profile.
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}


