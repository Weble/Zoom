<?php
/**
 * Recording
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Zoom API
 *
 * The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: developersupport@zoom.us
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Weble\Zoom\Model;

use \ArrayAccess;
use \Weble\Zoom\ObjectSerializer;

/**
 * Recording Class Doc Comment
 *
 * @category Class
 * @description Recording file object.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Recording implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Recording';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'meeting_id' => 'string',
        'recording_start' => 'string',
        'recording_end' => 'string',
        'file_type' => 'string',
        'file_size' => 'float',
        'play_url' => 'string',
        'download_url' => 'string',
        'status' => 'string',
        'deleted_time' => 'string',
        'recording_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'meeting_id' => null,
        'recording_start' => null,
        'recording_end' => null,
        'file_type' => null,
        'file_size' => null,
        'play_url' => null,
        'download_url' => null,
        'status' => null,
        'deleted_time' => null,
        'recording_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'meeting_id' => 'meeting_id',
        'recording_start' => 'recording_start',
        'recording_end' => 'recording_end',
        'file_type' => 'file_type',
        'file_size' => 'file_size',
        'play_url' => 'play_url',
        'download_url' => 'download_url',
        'status' => 'status',
        'deleted_time' => 'deleted_time',
        'recording_type' => 'recording_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'meeting_id' => 'setMeetingId',
        'recording_start' => 'setRecordingStart',
        'recording_end' => 'setRecordingEnd',
        'file_type' => 'setFileType',
        'file_size' => 'setFileSize',
        'play_url' => 'setPlayUrl',
        'download_url' => 'setDownloadUrl',
        'status' => 'setStatus',
        'deleted_time' => 'setDeletedTime',
        'recording_type' => 'setRecordingType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'meeting_id' => 'getMeetingId',
        'recording_start' => 'getRecordingStart',
        'recording_end' => 'getRecordingEnd',
        'file_type' => 'getFileType',
        'file_size' => 'getFileSize',
        'play_url' => 'getPlayUrl',
        'download_url' => 'getDownloadUrl',
        'status' => 'getStatus',
        'deleted_time' => 'getDeletedTime',
        'recording_type' => 'getRecordingType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    public const STATUS_COMPLETED = 'completed';



    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_COMPLETED,
        ];
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['meeting_id'] = $data['meeting_id'] ?? null;
        $this->container['recording_start'] = $data['recording_start'] ?? null;
        $this->container['recording_end'] = $data['recording_end'] ?? null;
        $this->container['file_type'] = $data['file_type'] ?? null;
        $this->container['file_size'] = $data['file_size'] ?? null;
        $this->container['play_url'] = $data['play_url'] ?? null;
        $this->container['download_url'] = $data['download_url'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['deleted_time'] = $data['deleted_time'] ?? null;
        $this->container['recording_type'] = $data['recording_type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The recording file ID. Included in the response of general query.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets meeting_id
     *
     * @return string
     */
    public function getMeetingId()
    {
        return $this->container['meeting_id'];
    }

    /**
     * Sets meeting_id
     *
     * @param string $meeting_id The meeting ID.
     *
     * @return $this
     */
    public function setMeetingId($meeting_id)
    {
        $this->container['meeting_id'] = $meeting_id;

        return $this;
    }

    /**
     * Gets recording_start
     *
     * @return string
     */
    public function getRecordingStart()
    {
        return $this->container['recording_start'];
    }

    /**
     * Sets recording_start
     *
     * @param string $recording_start The recording start time.
     *
     * @return $this
     */
    public function setRecordingStart($recording_start)
    {
        $this->container['recording_start'] = $recording_start;

        return $this;
    }

    /**
     * Gets recording_end
     *
     * @return string
     */
    public function getRecordingEnd()
    {
        return $this->container['recording_end'];
    }

    /**
     * Sets recording_end
     *
     * @param string $recording_end The recording end time. Response in general query.
     *
     * @return $this
     */
    public function setRecordingEnd($recording_end)
    {
        $this->container['recording_end'] = $recording_end;

        return $this;
    }

    /**
     * Gets file_type
     *
     * @return string
     */
    public function getFileType()
    {
        return $this->container['file_type'];
    }

    /**
     * Sets file_type
     *
     * @param string $file_type The recording file type. The value of this field could be one of the following:<br> `MP4`: Video file of the recording.<br>`M4A` Audio-only file of the recording.<br>`TIMELINE`: Timestamp file of the recording. To get a timeline file, the \"Add a timestamp to the recording\" setting must be enabled in the [recording settings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-recording#h_3f14c3a4-d16b-4a3c-bbe5-ef7d24500048). The time will display in the host's timezone, set on their Zoom profile. <br> `TRANSCRIPT`: Transcription file of the recording.<br> `CHAT`: A TXT file containing in-meeting chat messages that were sent during the meeting.<br>`CC`: File containing closed captions of the recording.<br><br> A recording file object with file type of either `CC` or `TIMELINE` **does not have** the following properties:<br>  `id`, `status`, `file_size`, `recording_type`, and `play_url`.
     *
     * @return $this
     */
    public function setFileType($file_type)
    {
        $this->container['file_type'] = $file_type;

        return $this;
    }

    /**
     * Gets file_size
     *
     * @return float
     */
    public function getFileSize()
    {
        return $this->container['file_size'];
    }

    /**
     * Sets file_size
     *
     * @param float $file_size The recording file size.
     *
     * @return $this
     */
    public function setFileSize($file_size)
    {
        $this->container['file_size'] = $file_size;

        return $this;
    }

    /**
     * Gets play_url
     *
     * @return string
     */
    public function getPlayUrl()
    {
        return $this->container['play_url'];
    }

    /**
     * Sets play_url
     *
     * @param string $play_url The URL using which a recording file can be played.
     *
     * @return $this
     */
    public function setPlayUrl($play_url)
    {
        $this->container['play_url'] = $play_url;

        return $this;
    }

    /**
     * Gets download_url
     *
     * @return string
     */
    public function getDownloadUrl()
    {
        return $this->container['download_url'];
    }

    /**
     * Sets download_url
     *
     * @param string $download_url The URL using which the recording file can be downloaded. **To access a private or password protected cloud recording, you must use a [Zoom JWT OAuth Server 2 Server app](https://marketplace.zoom.us/docs/guides/build/server-to-server-oauth-app/). <br> Consult: https://marketplace.zoom.us/docs/guides/guides/managing-recordings/`
     *
     * @return $this
     */
    public function setDownloadUrl($download_url)
    {
        $this->container['download_url'] = $download_url;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The recording status.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets deleted_time
     *
     * @return string
     */
    public function getDeletedTime()
    {
        return $this->container['deleted_time'];
    }

    /**
     * Sets deleted_time
     *
     * @param string $deleted_time The time at which recording was deleted. Returned in the response only for trash query.
     *
     * @return $this
     */
    public function setDeletedTime($deleted_time)
    {
        $this->container['deleted_time'] = $deleted_time;

        return $this;
    }

    /**
     * Gets recording_type
     *
     * @return string
     */
    public function getRecordingType()
    {
        return $this->container['recording_type'];
    }

    /**
     * Sets recording_type
     *
     * @param string $recording_type The recording type. The value of this field can be one of the following:<br>`shared_screen_with_speaker_view(CC)`<br>`shared_screen_with_speaker_view`<br>`shared_screen_with_gallery_view`<br>`speaker_view`<br>`gallery_view`<br>`shared_screen`<br>`audio_only`<br>`audio_transcript`<br>`chat_file`<br>`TIMELINE`
     *
     * @return $this
     */
    public function setRecordingType($recording_type)
    {
        $this->container['recording_type'] = $recording_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}


